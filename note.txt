https://www.jetbrains.com/help/idea/create-tests.html

Unit Testing in JUnit:
1. If there are no failures in a Junit test then it means test has succeeded / fast
2. Function signature should be public void
3. We should have one condition in a particular test
3. assertEqual, both values should be same or else it fails
4. We can pass in a String in every Assert function that will be printed as message if test fails
5. @Before to execute something before running every test for ex. to initialize test data
6. @After to execute something after executing every test for cleanup for ex. disconnect to DB
7. @BeforeClass and @AfterClass if we want to do only once not after every test
8. Both methods should be *static (ie. methods with these annotations)
9. For Objects/References like Array use assertArrayEquals
10. Handling exceptions: @Test(expected = ExceptionClass.class)
11. Check for performance @Test(timeout=timeInMilliseconds)

Parameterized Test:
1. Add @RunWith(Parameterized.class) at top of the class
2. Add a method annotated with @Parameters which returns a Collection which contains input and expected output
3. input and expectedOutput are inserted into constructor of that class so we create a parameterized constructor
4. Then we use it in our test function
5. It can only have 1 kind of test per class ie. areFirstAndLastTwoCharactersTheSame function would require another class if we are using parameterized test

Organize JUnits into Suites:
1. We can group tests -> group of tests known as Test suite
2. @RunWith(Suite.class) and specify tests @SuiteClasses({TestClass.class})